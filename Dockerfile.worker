# Multi-stage build for worker with heavy security tooling
FROM node:20-alpine AS builder

WORKDIR /app

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/workers/package.json ./apps/workers/

# Install pnpm and dependencies
RUN corepack enable && corepack prepare pnpm@latest --activate
RUN pnpm install --frozen-lockfile

# Copy source files (excluding node_modules to avoid conflicts)
COPY apps/ ./apps/
COPY common/ ./common/
COPY packages/ ./packages/
COPY *.json *.js *.ts *.md ./

# Build the workers package
RUN pnpm --filter @dealbrief/workers build

# Runtime stage - includes security tools
FROM node:20-alpine AS runtime

# Install runtime dependencies including Chromium
RUN apk add --no-cache \
    bash curl wget git python3 py3-pip unzip \
    chromium nss freetype harfbuzz ca-certificates \
    ttf-freefont libx11 libxcomposite libxdamage \
    gcompat bind-tools nmap

# Try to install sslscan from Alpine packages first, fallback to binary
RUN apk add --no-cache sslscan || \
    (wget -O /usr/local/bin/sslscan https://github.com/rbsec/sslscan/releases/download/2.0.15/sslscan-2.0.15-static-linux-x86_64 && \
     chmod +x /usr/local/bin/sslscan)

# Install security tools
ARG NUCLEI_VERSION=3.4.5
ARG TRUFFLEHOG_VERSION=3.83.7

RUN curl -L https://github.com/projectdiscovery/nuclei/releases/download/v${NUCLEI_VERSION}/nuclei_${NUCLEI_VERSION}_linux_amd64.zip -o nuclei.zip && \
    unzip nuclei.zip && mv nuclei /usr/local/bin/ && rm nuclei.zip && \
    chmod +x /usr/local/bin/nuclei && \
    nuclei -update-templates

RUN curl -sSL https://github.com/trufflesecurity/trufflehog/releases/download/v${TRUFFLEHOG_VERSION}/trufflehog_${TRUFFLEHOG_VERSION}_linux_amd64.tar.gz | \
    tar -xz -C /usr/local/bin trufflehog

# Install Python dependencies (removing problematic webtech)
RUN pip3 install --no-cache-dir --break-system-packages \
    dnstwist python-whois requests aiohttp

# Install httpx for reliable tech stack detection
RUN wget -q https://github.com/projectdiscovery/httpx/releases/download/v1.6.9/httpx_1.6.9_linux_amd64.zip && \
    unzip -o -q httpx_1.6.9_linux_amd64.zip && \
    mv httpx /usr/local/bin/ && \
    chmod +x /usr/local/bin/httpx && \
    rm -f httpx_1.6.9_linux_amd64.zip LICENSE.md README.md

# --- Force IPv4 preference at the OS resolver level ---
RUN echo 'precedence ::ffff:0:0/96  100' >> /etc/gai.conf

# Install sslscan for TLS vulnerability scanning
RUN apk add --no-cache sslscan
# Install nuclei (Tier-2 vulnerability scanner)
RUN wget -q https://github.com/projectdiscovery/nuclei/releases/download/v3.0.1/nuclei_3.0.1_linux_amd64.zip \
    && unzip -o -q nuclei_3.0.1_linux_amd64.zip -d /usr/local/bin \
    && chmod +x /usr/local/bin/nuclei \
    && rm -f nuclei_3.0.1_linux_amd64.zip LICENSE.md README.md

# Set up Chromium and force IPv4 DNS resolution
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
    NODE_ENV=production \
    NODE_OPTIONS="--dns-result-order=ipv4first" \
    GODEBUG="netdns=go+v4"

# Create app directory and user
WORKDIR /app
RUN addgroup -g 1001 -S scanner && \
    adduser -S -u 1001 -G scanner scanner

# Copy built application
COPY --from=builder --chown=scanner:scanner /app/node_modules ./node_modules
COPY --from=builder --chown=scanner:scanner /app/apps/workers/node_modules ./apps/workers/node_modules
COPY --from=builder --chown=scanner:scanner /app/apps/workers/dist ./apps/workers/dist
COPY --chown=scanner:scanner apps/workers/templates ./apps/workers/templates
COPY --chown=scanner:scanner apps/workers/scripts ./apps/workers/scripts
# Copy Python scripts to both locations for compatibility
COPY --chown=scanner:scanner apps/workers/modules/*.py ./apps/workers/modules/
COPY --chown=scanner:scanner apps/workers/modules/*.py ./apps/workers/dist/modules/

USER scanner

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "console.log('healthy')" || exit 1

# Default command - run the HTTP server for Eventarc
CMD ["node", "apps/workers/dist/server.js"]